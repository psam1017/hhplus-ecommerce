## 테스트 컨테이너의 필요성

- 로컬 DB 를 사용하는 경우 범용성이 낮다.
- 로컬 DB 커넥션을 사용하게 되면 Github Actions 나 Jenkins 같은 CI/CD 파이프라인에서 테스트하기 위한 사전준비가 필요하다. 즉, 테스트가 어렵고 환경 제약을 받게 된다.
- H2 같은 인메모리 DB 를 사용하는 경우, 실제로 사용할 DB 와 제품 차이가 있기에 불완전하고 신뢰성도 떨어진다. 개인적으로 H2 는 JPA 관련된 버그도 있어서 그다지 선호하지 않는다.
- 인메모리를 허용해서 H2 를 사용한다고 치더라도, Redis, Kafka 등등 의존하게 되는 외부 기술, 도구들이 많아질수록 인메모리 환경 사용에 제약 및 한계가 있다.
- 실제 제품이 클라우드 환경에서 Cloud DB, Elastic Cache, EKS 등등을 사용한다고 치더라도 로컬 실행을 위해 여전히 컨테이너 사용은 유효하다.

결론적으로, 실제 컨테이너 환경에서 돌리는 것과 유사하게, 또는 어느 환경에서도 즉시 테스트를 수행하도록 할 수 있게 테스트도 컨테이너 환경에서 실행할 수 있도록 해야 한다.

## 설정 방법

### 1. build.gradle
아래와 같이 spring, testcontainers 를 참고하여 필요한 의존성을 추가한다. 아래는 MySQL 과 Redis 를 추가하는 예시이다.

```
dependencies {

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.boot:spring-boot-starter-jdbc'

	// https://docs.spring.io/spring-boot/reference/testing/testcontainers.html
	testImplementation 'org.springframework.boot:spring-boot-testcontainers'
	// https://java.testcontainers.org/quickstart/junit_5_quickstart/
	testImplementation "org.junit.jupiter:junit-jupiter:5.8.1"
	testImplementation "org.testcontainers:testcontainers:1.20.3"
	testImplementation "org.testcontainers:junit-jupiter:1.20.3"
	// https://java.testcontainers.org/modules/databases/mysql/
	testImplementation 'org.testcontainers:mysql'
	// https://testcontainers.com/modules/redis/
	testImplementation 'com.redis:testcontainers-redis:2.2.2'

	// data
	runtimeOnly 'com.mysql:mysql-connector-j'
	// https://redisson.org/docs/integration-with-spring/#spring-data-redis
	implementation 'org.redisson:redisson-spring-data-32:3.37.0'
	...
}
```

### 2. applicaion-test.yaml
설정을 추가하는 게 아니라 오히려 빼줘야 한다.
아래 4가지 속성을, 커스텀해야 할 게 아니라면 속성을 아예 명시하지 않음으로 스프링이 자동으로 주입해주는 설정들을 더 안전하게 사용할 수 있다.
참고로, 인텔리제이에서는 ContainerDatabaseDriver 를 찾지 못해 경고를 주는데, 무시하면 된다. 불편하면 주석으로 경고가 뜨지 않게 할 수도 있다.

```
# mysql
spring.datasource.driver-class-name=org.testcontainers.jdbc.ContainerDatabaseDriver
spring.datasource.url=jdbc:tc:mysql:8.0.36:///
spring.datasource.username=username
spring.datasource.password=password

# redis
spring.data.redis.host=localhost
spring.data.redis.port=6379
```

### 3. 테스트 환경 클래스 설정(TestContainerEnvironment.java)

```
package hhplus.ecommerce.server.integration;

import com.redis.testcontainers.RedisContainer;
import org.junit.jupiter.api.AfterEach;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureMockMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.web.servlet.MockMvc;
import org.testcontainers.containers.MySQLContainer;
import org.testcontainers.junit.jupiter.Container;
import org.testcontainers.utility.DockerImageName;

@ActiveProfiles("test")
@AutoConfigureMockMvc
@SpringBootTest
public abstract class TestContainerEnvironment {

    @Autowired
    protected MockMvc mockMvc;

    @Autowired
    private DataCleaner dataCleaner;

    @AfterEach
    void tearDown() {
        dataCleaner.cleanAll();
    }

    // MySQL 시작
    @Container
    public static final String MY_SQL_FULL_IMAGE_NAME = "mysql:8.0.36";
    private static final int MY_SQL_PORT = 3306;
    private static final MySQLContainer<?> MY_SQL_CONTAINER;

    static {
        try (MySQLContainer<?> mySQLContainer = new MySQLContainer<>(DockerImageName.parse(MY_SQL_FULL_IMAGE_NAME))) {
            MY_SQL_CONTAINER = mySQLContainer
                    .withExposedPorts(MY_SQL_PORT)
                    .withEnv("MYSQL_ROOT_PASSWORD", "password")
                    .withReuse(true);
            MY_SQL_CONTAINER.start();
        }
    }
    // MySQL 끝

    // Redis 시작
    private static final String REDIS_FULL_IMAGE_NAME = "redis:7.4.1-alpine";
    private static final int REDIS_PORT = 6379;
    @Container
    public static final RedisContainer REDIS_CONTAINER;

    static {
        REDIS_CONTAINER = new RedisContainer(DockerImageName.parse(REDIS_FULL_IMAGE_NAME))
                .withExposedPorts(REDIS_PORT)
                .withReuse(true);
        REDIS_CONTAINER.start();
    }
    // Redis 끝
}

```

### 트러블 슈팅 : MySQL 이미지가 여러 개 띄워지는 현상
처음에는 여러 블로그 및 포스트들을 참고하면서 Config 클래스에서 컨테이너 설정을 Bean 으로 등록했었다.
그랬더니 한 번의 테스트에서 MySQL 이미지가 여러 번 띄워졌는데, 아마도 Spring Boot 컨텍스트가 업데이트될 때마다 이미지가 띄워지는 것처럼 보였다. 확실하지는 않다.
그래서 Bean 등록을 취소하고, 위 TestContainerEnvironment.java 처럼 static 으로 컨테이너를 사용했더니 이러한 현상이 사라졌다.
참고로 변경 전에 사용했던 Config 클래스는 아래와 같다.

```
package hhplus.ecommerce.server.integration;

import org.springframework.boot.test.context.TestConfiguration;
import org.springframework.boot.testcontainers.service.connection.ServiceConnection;
import org.springframework.context.annotation.Bean;
import org.testcontainers.containers.MySQLContainer;
import org.testcontainers.utility.DockerImageName;

@TestConfiguration(proxyBeanMethods = false)
public class TestContainerConfig {

    private static final String FULL_IMAGE_NAME = "mysql:8.0.36";

    /**
     * DB 로 사용할 MySQLContainer 빈을 생성한다.
     * Spring Boot 3.1 부터는 @ServiceConnection 을 사용하면 DB 컨테이너의 드라이버, URL 등등을 자동으로 설정해준다.
     * @link <a href="https://spring.io/blog/2023/06/23/improved-testcontainers-support-in-spring-boot-3-1">Improved Testcontainers Support in Spring Boot 3.1</a>
     * @return MySQLContainer
     */
    @Bean
    @ServiceConnection
    public MySQLContainer<?> mySQLContainer() {
        try (MySQLContainer<?> mySQLContainer = new MySQLContainer<>(DockerImageName.parse(FULL_IMAGE_NAME))) {
            return mySQLContainer.withReuse(true);
        }
    }

    ...
}
```